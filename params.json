{"name":"Hat.js","tagline":"Node.js deployment tool. All your scripts are Javascript.","body":"Hat.js\r\n========\r\n\r\nDeployment for Node js. It simplifies the deployment to production servers. \r\nThe Javascript Hat for the Ruby's Cap.\r\n\r\n\r\nWhat does it do?\r\n================\r\n\r\nIt uses ssh to allow execution of simple shell scripts on remote servers when deploying your node.js process.\r\n\r\nThe framework is extremely simple and reads from a deploy folder in the root of your application. You can add multiple files there each file becomes a stage. eg. staging.js for staging environment and production.js for production environment.\r\n\r\n\r\n\r\nThere is no DSL or language to describe your deployment. The frameworks consists of a simple JS deployment information file like in the [example folder](https://github.com/sreeix/hat.js/blob/master/examples/deploy.js).\r\n\r\nUsage\r\n======\r\n\r\n* Include hat.js in your package.json.\r\n* npm install\r\n* Create a deploy folder in the root of the app.\r\n* Add the appropriate stage configuration files\r\n* `hat.js -s staging deploy`\r\n\r\n* `hat.js --help` : Prints all the options available\r\n* `hat.js --tasks` : Prints all the available tasks and some basic description.\r\n* `hat.js --generate staging` : Generates a simple but working deploy script for staging environment\r\n\r\n\r\nThe standard format is hat.js <options> -s <stage> <function>\r\n\r\n\r\n  `asshat.js <options> <stage> `\r\nThis command will just rollback a release.\r\n\r\nStandard Tasks\r\n--------------------\r\n  \r\nFollowing are provided by default.\r\n  \r\n  * _setup_ : sets up the basic deployment environment. This should be done before complete deploy\r\n  * _cleanup_ : cleans up old releases from the hosts. Defaults to keep only 5 releases\r\n  * _deploy_ : Deploys the code to production. Changes Symlink and restarts application\r\n  * _rollback_ : Rolls back a deployment. By default only goes back 1 revision.\r\n\r\nIn the wild\r\n===========\r\nThe [Node Toolbox](http://nodetoolbox.com) uses hat.js to deploy, and the scripts are checked in [here](https://github.com/sreeix/nodetoolbox2/tree/master/deploy).\r\n\r\nAlso check out the scripts section of Nodetoolbox's [package.json](https://github.com/sreeix/nodetoolbox2/blob/master/package.json) for deployment via commandline options.\r\n\r\nConfiguration\r\n=============\r\n\r\nA simple exported javascript file is used for configuration. Look at [deploy.js](https://github.com/sreeix/hat.js/blob/master/examples/deploy.js)\r\nor use the --generate option to create a new one.\r\n\r\nHere are the details on the [Config Options](https://github.com/sreeix/hat.js/wiki/Configuration)\r\n\r\nDeployment Steps\r\n==================\r\nOn running deploy following happens\r\n\r\n* **setup** Setup of the folders. The deployment structure follows cap structure of\r\n  * current (This is where the app will be running from)\r\n  * releases (All the releases deployed to the machine. current folder points to one of the release folders)\r\n  * shared (All the stuff common between releases. Stuff like pids/logs/caches/sockets)\r\n* **checkout** Git clone the appropriate branch to the releases folder.\r\n* **changeSymlinks** Symlinks to current are switched to the new release.\r\n* **restart** App is restarted.If using npm module, npm stop; npm install; npm start is invoked in sequence.\r\n\r\n\r\nExtending the deploy scripting\r\n==============================\r\n\r\nAll tasks have a pre/post script. eg. if a *predeploy* function exists in the deployscript then it will be executed before the execution of deploy task. Similarly if *postdeploy* function exists  then it will be invoked after deploy step is successful.\r\n\r\n\r\nBy implementing the default functions (restart/deploy/cleanup/changeSymlinks) you could do your own thing and not rely on any of the internal things. This is being done in [npm.js](https://github.com/sreeix/hat.js/blob/master/lib/npm.js).\r\n\r\nThe plugins are called in the context of the main app so most internal methods are available for plugins to call eg.\r\n\r\n* _ssh : Executes command(s) on a host\r\n* hosts : function to execute stuff on each machine.\r\n* _serial: execute bunch of methods serially.\r\n\r\n\r\nLimitations\r\n============\r\n\r\n* Currently only supported repository type is **git**\r\n* Currently only supported deployment type is npm.\r\n* Deployment does not happen in a transaction, ie. rollback will not be called for failed deployments\r\n* Half assed api for plugin Authors. I am actively looking to improve this.\r\n* Lots of missing options (like set deploy optimization for checkouts/ deploying via scp on remote macines)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}